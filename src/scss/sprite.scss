// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$-logo-b-name: "Logo-b";
$-logo-b-x: 0px;
$-logo-b-y: 0px;
$-logo-b-offset-x: 0px;
$-logo-b-offset-y: 0px;
$-logo-b-width: 208px;
$-logo-b-height: 67px;
$-logo-b-total-width: 208px;
$-logo-b-total-height: 152px;
$-logo-b-image: "sprite.png";
$-logo-b: (
  0px,
  0px,
  0px,
  0px,
  208px,
  67px,
  208px,
  152px,
  "sprite.png",
  "Logo-b"
);
$-logo-name: "Logo";
$-logo-x: 0px;
$-logo-y: 67px;
$-logo-offset-x: 0px;
$-logo-offset-y: -67px;
$-logo-width: 94px;
$-logo-height: 85px;
$-logo-total-width: 208px;
$-logo-total-height: 152px;
$-logo-image: "sprite.png";
$-logo: (0px, 67px, 0px, -67px, 94px, 85px, 208px, 152px, "sprite.png", "Logo");
$logo2-vintage-name: "logo2-vintage";
$logo2-vintage-x: 94px;
$logo2-vintage-y: 67px;
$logo2-vintage-offset-x: -94px;
$logo2-vintage-offset-y: -67px;
$logo2-vintage-width: 32px;
$logo2-vintage-height: 32px;
$logo2-vintage-total-width: 208px;
$logo2-vintage-total-height: 152px;
$logo2-vintage-image: "sprite.png";
$logo2-vintage: (
  94px,
  67px,
  -94px,
  -67px,
  32px,
  32px,
  208px,
  152px,
  "sprite.png",
  "logo2-vintage"
);
$spritesheet-width: 208px;
$spritesheet-height: 152px;
$spritesheet-image: "sprite.png";
$spritesheet-sprites: ($-logo-b, $-logo, $logo2-vintage);
$spritesheet: (208px, 152px, "sprite.png", $spritesheet-sprites);

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url("../img/sprites/sprite.png");
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
